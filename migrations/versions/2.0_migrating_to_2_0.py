"""migrating to 2.0

Revision ID: 2.0
Revises: 1.0
Create Date: 2025-03-12 05:24:54.377703

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import expression as expr
from sqlalchemy.sql import table, column



# revision identifiers, used by Alembic.
revision = '2.0'
down_revision = '1.0'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('deleted_group_users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('object_id', sa.Integer(), nullable=True),
    sa.Column('object_type', sa.String(length=6), nullable=True),
    sa.Column('members', sa.String(), nullable=True),
    sa.Column('owners', sa.String(), nullable=True),
    sa.Column('assistants', sa.String(), nullable=True),
    sa.Column('datetime', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('group_assistants',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('group_members',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('group_owners',
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('group_id', 'user_id')
    )
    op.create_table('home_logging',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ipaddr', sa.String(), nullable=True),
    sa.Column('action', sa.String(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('datetime', sa.DateTime(), nullable=False),
    sa.Column('lab_id', sa.String(length=36), nullable=True),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['lab_id'], ['labs.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lab_answer_sheet',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('lab_id', sa.String(length=36), nullable=True),
    sa.Column('answers', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['lab_id'], ['labs.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lab_groups',
    sa.Column('lab_id', sa.String(length=40), nullable=False),
    sa.Column('group_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['lab_id'], ['labs.id'], ),
    sa.PrimaryKeyConstraint('lab_id', 'group_id')
    )
    op.drop_table('user_groups')
    with op.batch_alter_table('groups', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=True))
        batch_op.add_column(sa.Column('uid', sa.String(length=15), nullable=True))
        batch_op.add_column(sa.Column('description', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('organization', sa.String(), nullable=True))
        batch_op.add_column(sa.Column('expiration', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('approved_users', sa.Text(), nullable=True))
        batch_op.add_column(sa.Column('accesstoken', sa.String(length=32), nullable=True))
        batch_op.create_unique_constraint("uq_const_uid", ['uid'])

    with op.batch_alter_table('lab_instances', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=True))

    labinst = table("lab_instances", column("active"), column("is_deleted"))
    op.execute(
        labinst.update()
        .where(labinst.c.active == expr.false())
        .values({"is_deleted": expr.true()})
    )
    op.execute(
        labinst.update()
        .where((labinst.c.active == expr.true()) | (labinst.c.active.is_(None)))
        .values({"is_deleted": expr.false()})
    )

    with op.batch_alter_table('lab_instances', schema=None) as batch_op:
        batch_op.drop_column('active')

    with op.batch_alter_table('labs', schema=None) as batch_op:
        batch_op.alter_column('category_id',
               existing_type=sa.INTEGER(),
               nullable=False)

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('is_deleted', sa.Boolean(), nullable=True))

    users = table("users", column("active"), column("is_deleted"))
    op.execute(
        users.update()
        .where(users.c.active == expr.false())
        .values({"is_deleted": expr.true()})
    )
    op.execute(
        users.update()
        .where((users.c.active == expr.true()) | (users.c.active.is_(None)))
        .values({"is_deleted": expr.false()})
    )

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('active')

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.add_column(sa.Column('active', sa.BOOLEAN(), nullable=True))

    users = table("users", column("active"), column("is_deleted"))
    op.execute(
        users.update()
        .where(users.c.is_deleted == expr.true())
        .values({"active": expr.false()})
    )
    op.execute(
        users.update()
        .where((users.c.is_deleted == expr.false()) | (users.c.is_deleted.is_(None)))
        .values({"active": expr.true()})
    )

    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('is_deleted')

    with op.batch_alter_table('labs', schema=None) as batch_op:
        batch_op.alter_column('category_id',
               existing_type=sa.INTEGER(),
               nullable=True)

    with op.batch_alter_table('lab_instances', schema=None) as batch_op:
        batch_op.add_column(sa.Column('active', sa.BOOLEAN(), nullable=True))

    labinst = table("lab_instances", column("active"), column("is_deleted"))
    op.execute(
        labinst.update()
        .where(labinst.c.is_deleted == expr.true())
        .values({"active": expr.false()})
    )
    op.execute(
        labinst.update()
        .where((labinst.c.is_deleted == expr.false()) | (labinst.c.is_deleted.is_(None)))
        .values({"active": expr.true()})
    )

    with op.batch_alter_table('lab_instances', schema=None) as batch_op:
        batch_op.drop_column('is_deleted')

    with op.batch_alter_table('groups', schema=None) as batch_op:
        batch_op.drop_constraint("uq_const_uid", type_='unique')
        batch_op.drop_column('accesstoken')
        batch_op.drop_column('approved_users')
        batch_op.drop_column('expiration')
        batch_op.drop_column('organization')
        batch_op.drop_column('description')
        batch_op.drop_column('uid')
        batch_op.drop_column('is_deleted')

    op.create_table('user_groups',
    sa.Column('user_id', sa.INTEGER(), nullable=False),
    sa.Column('group_id', sa.INTEGER(), nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('user_id', 'group_id')
    )
    op.drop_table('lab_groups')
    op.drop_table('lab_answer_sheet')
    op.drop_table('home_logging')
    op.drop_table('group_owners')
    op.drop_table('group_members')
    op.drop_table('group_assistants')
    op.drop_table('deleted_group_users')
    # ### end Alembic commands ###

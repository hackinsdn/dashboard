"""Multiple categories for labs

Revision ID: 2.0.2
Revises: 2.0.1
Create Date: 2025-06-28 00:00:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '2.0.2'
down_revision = '2.0.1'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create the association table for many-to-many relationship
    op.create_table('lab_categories_association',
        sa.Column('lab_id', sa.String(40), nullable=False),
        sa.Column('category_id', sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(['category_id'], ['lab_categories.id'], ),
        sa.ForeignKeyConstraint(['lab_id'], ['labs.id'], ),
        sa.PrimaryKeyConstraint('lab_id', 'category_id')
    )
    
    # Migrate existing data from category_id to the new association table
    connection = op.get_bind()
    result = connection.execute(sa.text("SELECT id, category_id FROM labs WHERE category_id IS NOT NULL"))
    for lab_id, category_id in result:
        connection.execute(
            sa.text("INSERT INTO lab_categories_association (lab_id, category_id) VALUES (:lab_id, :category_id)"),
            {"lab_id": lab_id, "category_id": category_id}
        )
    
    # Drop the old category_id column
    # Update: we wont drop the category_id column because some DB does not support such
    # operation  like SQLite (although workaround exists)
    # op.drop_column('labs', 'category_id')
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Add back the category_id column
    # category ID was not deleted, see comment above.
    # op.add_column('labs', sa.Column('category_id', sa.Integer(), nullable=True))
    
    # Migrate data back (taking the first category for each lab)
    connection = op.get_bind()
    result = connection.execute(sa.text("""
        SELECT lab_id, MIN(category_id) as category_id 
        FROM lab_categories_association 
        GROUP BY lab_id
    """))
    for lab_id, category_id in result:
        connection.execute(
            sa.text("UPDATE labs SET category_id = :category_id WHERE id = :lab_id"),
            {"lab_id": lab_id, "category_id": category_id}
        )
    
    # Make category_id not nullable again
    # op.alter_column('labs', 'category_id', nullable=False)
    
    # Add back the foreign key constraint
    # op.create_foreign_key(None, 'labs', 'lab_categories', ['category_id'], ['id'])
    
    # Drop the association table
    op.drop_table('lab_categories_association')
    
    # ### end Alembic commands ###
